{"version":3,"sources":["components/UpdateSpell.js","components/UpdateModal.js","components/SpellCard.js","components/AddSpell.js","components/AddSpellModal.js","components/SpellLibrary.js","App.js","serviceWorker.js","index.js"],"names":["API_URL","process","UpdateSpell","props","handleChange","target","setState","name","value","handleDelete","fetch","spell","_id","method","then","setShow","refresh","handleSelectSchool","school","handleSelectCasting","casting","handleSubmit","event","preventDefault","headers","body","JSON","stringify","state","level","range","duration","components","description","onSubmit","this","className","htmlFor","type","onChange","max","disable","Button","variant","onClick","Component","UpdateModal","Modal","aria-labelledby","centered","Header","closeButton","Body","onHide","UpdateModalButton","React","useState","modalShow","setModalShow","show","SpellCard","open","setOpen","collapseid","Card","key","aria-controls","aria-expanded","Collapse","in","id","AddSpell","disabled","min","AddSpellModal","AddSpellModalButton","spells","response","json","displaySpells","map","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.267f5750.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport Button from 'react-bootstrap/Button'\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL\r\n\r\nexport default class UpdateSpell extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        const { spell } = props\r\n\r\n        this.state = {\r\n            name: spell.name,\r\n            school: spell.school,\r\n            level: spell.level,\r\n            casting: spell.casting,\r\n            range: spell.range,\r\n            duration: spell.duration,\r\n            components: spell.components,\r\n            description: spell.description\r\n        }\r\n    }\r\n\r\n    handleChange = ({ target }) => {\r\n        this.setState({ [target.name]: target.value })\r\n    }\r\n\r\n    handleDelete = () => {\r\n        fetch(`${API_URL}spells/${this.props.spell._id}`, {\r\n            method: 'DELETE'\r\n        })\r\n            .then(this.props.setShow)\r\n            .then(this.props.refresh)\r\n    }\r\n\r\n    handleSelectSchool = (value) => {\r\n        this.setState({ school: value })\r\n    }\r\n    handleSelectCasting = (value) => {\r\n        this.setState({casting: value})\r\n    }\r\n\r\n    handleSubmit = (event) => {\r\n        event.preventDefault()\r\n\r\n        fetch(`${API_URL}spells/${this.props.spell._id}`, {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(this.state)\r\n        })\r\n            .then(this.props.setShow)\r\n            .then(this.props.refresh)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.handleSubmit} className='input-form'>\r\n                <span className='input-name'>\r\n                    <label htmlFor='name'>Spell Name</label>\r\n                    <input name='name'\r\n                        value={this.state.name}\r\n                        type='text'\r\n                        onChange={this.handleChange} />\r\n                </span>\r\n\r\n                <span className='input-school'>\r\n                    <label htmlFor='school'>School of Magic</label>\r\n                    <select value={this.state.school}\r\n                        onChange={({ target }) => this.handleSelectSchool(target.value)}>\r\n                        <option value='Abjuration'>Abjuration</option>\r\n                        <option value='Conjuration'>Conjuration</option>\r\n                        <option value='Divination'>Divination</option>\r\n                        <option value='Enchantment'>Enchantment</option>\r\n                        <option value='Evocation'>Evocation</option>\r\n                        <option value='Illusion'>Illusion</option>\r\n                        <option value='Necromancy'>Necromancy</option>\r\n                        <option value='Transmutation'>Transmutation</option>\r\n                    </select>\r\n                </span>\r\n\r\n                <span className='input-level'>\r\n                    <label htmlFor='level'>Spell Level</label>\r\n                    <input name='level'\r\n                        value={this.state.level}\r\n                        type='number'\r\n                        onChange={this.handleChange}\r\n                        max='9' />\r\n                </span>\r\n\r\n                <span className='oneline casting'>\r\n                    <label htmlFor='casting'>Casting Time</label>\r\n                    <select value={this.state.casting}\r\n                        onChange={({ target }) => this.handleSelectCasting(target.value)}>\r\n                        <option disable value=''>Choose Casting Time</option>\r\n                        <option value='1 Action'>1 Action</option>\r\n                        <option value='1 Bonus Action'>1 Bonus Action</option>\r\n                        <option value='1 Reaction'>1 Reaction</option>\r\n                        <option value='1 Minute'>1 Minute</option>\r\n                        <option value='10 Minutes'>10 Minutes</option>\r\n                        <option value='1 Hour'>1 Hour</option>\r\n                        <option value='8 Hours'>8 Hours</option>\r\n                        <option value='12 Hours'>12 Hours</option>\r\n                        <option value='24 Hours'>24 Hours</option>\r\n                    </select>\r\n                </span>\r\n\r\n                <span className='oneline range'>\r\n                    <label htmlFor='range'>Range</label>\r\n                    <input name='range'\r\n                        value={this.state.range}\r\n                        type='text'\r\n                        onChange={this.handleChange} />\r\n                </span>\r\n\r\n                <span className='oneline duration'>\r\n                    <label htmlFor='duration'>Duration</label>\r\n                    <input name='duration'\r\n                        value={this.state.duration}\r\n                        type='text'\r\n                        onChange={this.handleChange} />\r\n                </span>\r\n\r\n                <span className='oneline components'>\r\n                    <label htmlFor='components'>Components</label>\r\n                    <input name='components'\r\n                        value={this.state.components}\r\n                        type='text'\r\n                        onChange={this.handleChange} />\r\n                </span>\r\n\r\n                <span className='oneline description'>\r\n                    <label htmlFor='description'>Description</label>\r\n                    <input name='description'\r\n                        value={this.state.description}\r\n                        type='text'\r\n                        onChange={this.handleChange} />\r\n                </span>\r\n\r\n                <Button variant=\"outline-dark\"\r\n                    onClick={this.handleSubmit}>Update the Spell</Button>\r\n                <Button className='deletebutton' variant='outline-danger' onClick={this.handleDelete}>Remove Spell</Button>\r\n            </form>\r\n        )\r\n    }\r\n}","import React from 'react'\r\nimport Modal from 'react-bootstrap/Modal'\r\nimport Button from 'react-bootstrap/Button'\r\nimport UpdateSpell from './UpdateSpell'\r\n\r\nfunction UpdateModal(props) {\r\n    return (\r\n        <Modal className='addmodal'\r\n            {...props}\r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            centered\r\n        >\r\n            <Modal.Header className='input-form'closeButton>Edit {props.spell.name}</Modal.Header>\r\n            <Modal.Body>\r\n                <UpdateSpell setShow={props.onHide} spell={props.spell} />\r\n            </Modal.Body>\r\n        </Modal>\r\n    );\r\n}\r\n\r\nexport default function UpdateModalButton({spell, refresh}) {\r\n    const [modalShow, setModalShow] = React.useState(false);\r\n\r\n    return (\r\n        <>\r\n            <Button variant=\"outline-light\" onClick={() => {\r\n                setModalShow(true)}}>\r\n                Edit\r\n            </Button>\r\n\r\n            <UpdateModal\r\n                show={modalShow}\r\n                spell={spell}\r\n                onHide={() => {\r\n                    setModalShow(false)\r\n                    refresh()\r\n                }}\r\n            />\r\n        </>\r\n    );\r\n}","import React, { useState } from 'react'\r\nimport Card from 'react-bootstrap/Card'\r\nimport Button from 'react-bootstrap/Button'\r\nimport Collapse from 'react-bootstrap/Collapse'\r\n\r\nimport UpdateModalButton from './UpdateModal'\r\n\r\nexport default function SpellCard({ spell, refresh }) {\r\n\r\n    const [open, setOpen] = useState(false)\r\n\r\n    let collapseid = `collapse${spell._id}`\r\n\r\n    return (\r\n        <Card className='spellcard' key={spell._id}>\r\n            {/* <span><span className='spellname'>{spell.name}</span> | {spell.school} {spell.level}</span> */}\r\n            <Card.Header className='card-head'>\r\n                <span className='card-name'>{spell.name}</span>\r\n                <Button onClick={() => setOpen(!open)}\r\n                    aria-controls={collapseid}\r\n                    aria-expanded={open}\r\n                    variant='outline-dark'>View</Button>\r\n                <UpdateModalButton className='deletebutton' spell={spell} refresh={refresh} />\r\n            </Card.Header>\r\n            <Collapse in={open}>\r\n                <Card.Body id={collapseid} className='card-body'>\r\n                    <div className='card-sub'>{spell.school} {spell.level}</div>\r\n                    <div>Casting Time: {spell.casting} </div>\r\n                    <div>Range: {spell.range}</div>\r\n                    <div>Duration: {spell.duration}</div>\r\n                    <div>Components: {spell.components}</div>\r\n                    <div>{spell.description}</div>\r\n                </Card.Body>\r\n            </Collapse>\r\n        </Card>\r\n    )\r\n}","import React, { Component } from 'react'\r\nimport Button from 'react-bootstrap/Button'\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL\r\n\r\nexport default class AddSpell extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            name: '',\r\n            school: '',\r\n            level: 0,\r\n            casting: '',\r\n            range: '',\r\n            duration: '',\r\n            components: ''\r\n        }\r\n    }\r\n\r\n    handleChange = ({ target }) => {\r\n        this.setState({ [target.name]: target.value })\r\n    }\r\n\r\n    handleSelectSchool = (value) => {\r\n        this.setState({ school: value })\r\n    }\r\n    handleSelectCasting = (value) => {\r\n        this.setState({ casting: value })\r\n    }\r\n\r\n    handleSubmit = (event) => {\r\n        event.preventDefault()\r\n\r\n        if(this.state.casting !== '') {\r\n            if(this.state.school !== '') {\r\n        \r\n        fetch(`${API_URL}spells`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(this.state)\r\n        })\r\n            .then()\r\n            .then(this.props.refresh)\r\n            .then(() => this.setState({\r\n                name: '',\r\n                school: '',\r\n                level: 0,\r\n                casting: '',\r\n                range: '',\r\n                duration: '',\r\n                components: ''\r\n            }))\r\n        }}\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.handleSubmit} className='input-form'>\r\n                <span className='oneline name'>\r\n                    <label htmlFor='name'>Spell Name</label>\r\n                    <input name='name'\r\n                        value={this.state.name}\r\n                        type='text'\r\n                        onChange={this.handleChange} />\r\n                </span>\r\n\r\n                <span className='school'>\r\n                    <label htmlFor='school'>School of Magic</label>\r\n                    <select value={this.state.school}\r\n                        onChange={({ target }) => this.handleSelectSchool(target.value)}>\r\n                        <option disabled value=''>Choose One</option>\r\n                        <option value='Abjuration'>Abjuration</option>\r\n                        <option value='Conjuration'>Conjuration</option>\r\n                        <option value='Divination'>Divination</option>\r\n                        <option value='Enchantment'>Enchantment</option>\r\n                        <option value='Evocation'>Evocation</option>\r\n                        <option value='Illusion'>Illusion</option>\r\n                        <option value='Necromancy'>Necromancy</option>\r\n                        <option value='Transmutation'>Transmutation</option>\r\n                    </select>\r\n                </span>\r\n\r\n                <span className='level'>\r\n                    <label htmlFor='level'>Spell Level</label>\r\n                    <input name='level'\r\n                        value={this.state.level}\r\n                        type='number'\r\n                        onChange={this.handleChange}\r\n                        max='9'\r\n                        min='0' />\r\n                </span>\r\n\r\n                <span className='oneline casting'>\r\n                    <label htmlFor='casting'>Casting Time</label>\r\n                    <select value={this.state.casting}\r\n                        onChange={({ target }) => this.handleSelectCasting(target.value)}>\r\n                        <option disabled value=''>Choose One</option>\r\n                        <option value='1 Action'>1 Action</option>\r\n                        <option value='1 Bonus Action'>1 Bonus Action</option>\r\n                        <option value='1 Reaction'>1 Reaction</option>\r\n                        <option value='1 Minute'>1 Minute</option>\r\n                        <option value='10 Minutes'>10 Minutes</option>\r\n                        <option value='1 Hour'>1 Hour</option>\r\n                        <option value='8 Hours'>8 Hours</option>\r\n                        <option value='12 Hours'>12 Hours</option>\r\n                        <option value='24 Hours'>24 Hours</option>\r\n                    </select>\r\n                </span>\r\n\r\n                <span className='oneline range'>\r\n                    <label htmlFor='range'>Range</label>\r\n                    <input name='range'\r\n                        value={this.state.range}\r\n                        type='text'\r\n                        onChange={this.handleChange} />\r\n                </span>\r\n\r\n                <span className='oneline duration'>\r\n                    <label htmlFor='duration'>Duration</label>\r\n                    <input name='duration'\r\n                        value={this.state.duration}\r\n                        type='text'\r\n                        onChange={this.handleChange} />\r\n                </span>\r\n\r\n                <span className='oneline components'>\r\n                    <label htmlFor='components'>Components</label>\r\n                    <input name='components'\r\n                        value={this.state.components}\r\n                        type='text'\r\n                        onChange={this.handleChange} />\r\n                </span>\r\n\r\n                <span className='oneline description'>\r\n                    <label htmlFor='description'>Description</label>\r\n                    <input name='description'\r\n                        value={this.state.description}\r\n                        type='text'\r\n                        onChange={this.handleChange} />\r\n                </span>\r\n\r\n                <Button variant=\"outline-dark\"\r\n                    onClick={this.handleSubmit}>Add a Spell</Button>\r\n            </form>\r\n        )\r\n    }\r\n}","import React from 'react'\r\nimport Modal from 'react-bootstrap/Modal'\r\nimport Button from 'react-bootstrap/Button'\r\nimport AddSpell from './AddSpell'\r\n\r\nfunction AddSpellModal(props) {\r\n    return (\r\n        <Modal className='addmodal'\r\n            {...props}\r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            centered\r\n        >\r\n            <Modal.Header className='input-form'closeButton>Add Spell</Modal.Header>\r\n            <Modal.Body>\r\n                <AddSpell />\r\n            </Modal.Body>\r\n        </Modal>\r\n    );\r\n}\r\n\r\nexport default function AddSpellModalButton({refresh}) {\r\n    const [modalShow, setModalShow] = React.useState(false);\r\n\r\n    return (\r\n        <>\r\n            <Button variant=\"outline-dark\" onClick={() => {\r\n                setModalShow(true)}}>\r\n                Add a Spell\r\n            </Button>\r\n\r\n            <AddSpellModal\r\n                show={modalShow}\r\n                onHide={() => {\r\n                    setModalShow(false)\r\n                    refresh()\r\n                }}\r\n            />\r\n        </>\r\n    );\r\n}","import React, {Component} from 'react'\r\n// import Button from 'react-bootstrap/Button'\r\nimport SpellCard from './SpellCard'\r\nimport AddSpellModal from './AddSpellModal'\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL\r\n\r\nexport default class extends Component {\r\n\r\n    state = {spells: []}\r\n\r\n    refresh = () => {\r\n        fetch(`${API_URL}spells`)\r\n        .then(response => response.json())\r\n        .then(spells => this.setState({spells}))\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.refresh()\r\n    }\r\n    \r\n    render() {\r\n        \r\n        const displaySpells = this.state.spells.map(spell =>\r\n            <SpellCard spell={spell}\r\n            key={spell._id}\r\n            refresh={this.refresh} />)\r\n\r\n        return (\r\n        <div>\r\n            <h1>Spell Library</h1>\r\n            <AddSpellModal refresh={this.refresh}/><br />\r\n            {displaySpells}\r\n        </div>\r\n    )}\r\n}","import React from 'react';\nimport SpellLibrary from './components/SpellLibrary'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SpellLibrary />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}